@page "/weather"

@using RedisDemo.Extensions

@inject Microsoft.Extensions.Caching.Distributed.IDistributedCache cache

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<button class="btn btn-primary" @onclick="LoadForecast">Load Forecast</button>

@if (forecasts is null && loadLocation is null)
{
<p><em>Click the buutton to load the forecast!</em></p>    
}
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{


    <div class="h3 @isCacheData">@loadLocation
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private string loadLocation = null; //source of data, e.g. redis, db
    private string isCacheData = "";


    private async Task LoadForecast()
    {
        forecasts = null;
        loadLocation = null; 

        string recordKey = "WeatherForcast_"+ DateTime.Now.ToString("yyyyMMdd_hhmm"); 

        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);

        if (forecasts is null)
        {
            forecasts = GetForecastsFromDb();

            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCacheData = "";

            await cache.SetRecordAsync(recordKey, forecasts);
        }
        else
        {
            loadLocation = $"Loaded from the cache at {DateTime.Now}";
            isCacheData = "text-danger"; 
        }

    }

    private WeatherForecast[] GetForecastsFromDb()
    {
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        var forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

        return forecasts; 
    }


    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
